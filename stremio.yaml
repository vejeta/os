package:
  name: stremio
  version: 4.4.169
  epoch: 0
  description: Modern media center for online video content
  copyright:
    - license: GPL-3.0-or-later
  dependencies:
    runtime:
      - librsvg
      - mpv-dev
      - nodejs
      - qt5-qtbase
      - qt5-qtdeclarative
      - qt5-qtwebengine
environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - cmake
      - librsvg
      - mpv-dev
      - nodejs
      - npm
      - openssl-dev
      - pkgconf
      - qt5-qtbase-dev
      - qt5-qtdeclarative-dev
      - qt5-qtwebengine-dev
      - wolfi-base
pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/Stremio/stremio-shell
      tag: v${{package.version}}
      expected-commit: 89526c3b6b01fc5289010c72d81546b9dfe15501
  - name: Add CompatibleSingleApp implementation
    runs: |
      # Embed CompatibleSingleApp source (custom Qt single-instance implementation)
      cat > compatible_singleapp.h << 'EOF'
      #ifndef COMPATIBLESINGLEAPP_H
      #define COMPATIBLESINGLEAPP_H

      #include <QApplication>
      #include <QLocalServer>
      #include <QLocalSocket>

      class CompatibleSingleApp : public QApplication {
          Q_OBJECT
      public:
          CompatibleSingleApp(int &argc, char **argv, bool allowSecondary = false);
          bool isPrimary() const { return m_isPrimary; }
          bool sendMessage(const QByteArray &message, int timeout = 100);

      signals:
          void receivedMessage(quint32 instanceId, QByteArray message);

      private slots:
          void receiveConnection();
          void readMessage();

      private:
          bool m_isPrimary;
          QLocalServer *m_server;
          QString m_serverName;
      };
      #endif
      EOF

      cat > compatible_singleapp.cpp << 'EOF'
      #include "compatible_singleapp.h"
      #include <QDataStream>
      #include <QCryptographicHash>

      CompatibleSingleApp::CompatibleSingleApp(int &argc, char **argv, bool allowSecondary)
          : QApplication(argc, argv), m_isPrimary(true), m_server(nullptr) {

          m_serverName = QCryptographicHash::hash(
              QCoreApplication::applicationFilePath().toUtf8(),
              QCryptographicHash::Sha256
          ).toHex();

          QLocalSocket socket;
          socket.connectToServer(m_serverName);
          if (socket.waitForConnected(500)) {
              m_isPrimary = false;
              return;
          }

          if (!allowSecondary) {
              m_server = new QLocalServer(this);
              QLocalServer::removeServer(m_serverName);

              if (m_server->listen(m_serverName)) {
                  connect(m_server, &QLocalServer::newConnection,
                          this, &CompatibleSingleApp::receiveConnection);
              }
          }
      }

      bool CompatibleSingleApp::sendMessage(const QByteArray &message, int timeout) {
          QLocalSocket socket;
          socket.connectToServer(m_serverName);

          if (!socket.waitForConnected(timeout))
              return false;

          QByteArray block;
          QDataStream out(&block, QIODevice::WriteOnly);
          out << message;

          socket.write(block);
          socket.flush();
          socket.waitForBytesWritten(timeout);

          return true;
      }

      void CompatibleSingleApp::receiveConnection() {
          QLocalSocket *socket = m_server->nextPendingConnection();
          connect(socket, &QLocalSocket::readyRead,
                  this, &CompatibleSingleApp::readMessage);
      }

      void CompatibleSingleApp::readMessage() {
          QLocalSocket *socket = qobject_cast<QLocalSocket*>(sender());
          if (!socket) return;

          QByteArray message = socket->readAll();
          emit receivedMessage(0, message);

          socket->disconnectFromServer();
      }
      EOF
  - uses: patch
    with:
      patches: stremio/001-release-makefile-fhs.patch
  - uses: patch
    with:
      patches: stremio/002-cmake-add-singleapp.patch
  - uses: patch
    with:
      patches: stremio/003-main-qtwebengine-init.patch
  - uses: patch
    with:
      patches: stremio/004-mainapplication-use-compat.patch
  - uses: patch
    with:
      patches: stremio/005-process-environment-fix.patch
  - name: Generate icons
    runs: |
      mkdir -p icons
      cd icons
      for size in 16 22 24 32 64 128; do
        rsvg-convert ../images/stremio.svg -w $size -o smartcode-stremio_${size}.png
        rsvg-convert ../images/stremio_tray_white.svg -w $size -o smartcode-stremio-tray_${size}.png
      done
  - name: Build with CMake
    runs: |
      export QT_SELECT=5
      export QT_DEFAULT_MAJOR_VERSION=5

      mkdir -p build
      cd build
      cmake -G"Unix Makefiles" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_CXX_FLAGS="-fstack-protector-strong -D_FORTIFY_SOURCE=2" \
        -DCMAKE_C_FLAGS="-fstack-protector-strong -D_FORTIFY_SOURCE=2" \
        ..
      make -j$(nproc)
  - name: Install files
    runs: |
      # Install binary to libexec (not directly in PATH)
      install -Dm755 build/stremio "${{targets.destdir}}"/usr/libexec/stremio/stremio

      # Create wrapper script for proper environment setup
      mkdir -p "${{targets.destdir}}"/usr/bin
      cat > "${{targets.destdir}}"/usr/bin/stremio << 'WRAPPER'
      #!/bin/sh
      # Stremio wrapper - ensures proper environment for Qt5/WebEngine
      export QT_QPA_PLATFORM="${QT_QPA_PLATFORM:-xcb}"
      export QT_AUTO_SCREEN_SCALE_FACTOR="${QT_AUTO_SCREEN_SCALE_FACTOR:-1}"
      exec /usr/libexec/stremio/stremio "$@"
      WRAPPER
      chmod 755 "${{targets.destdir}}"/usr/bin/stremio

      # Install desktop file
      install -Dm644 stremio.desktop "${{targets.destdir}}"/usr/share/applications/stremio.desktop

      # Install icons (proper FreeDesktop hierarchy)
      for size in 16 22 24 32 64 128; do
        install -Dm644 "icons/smartcode-stremio_${size}.png" \
          "${{targets.destdir}}"/usr/share/icons/hicolor/${size}x${size}/apps/stremio.png
      done

      # Install tray icons
      mkdir -p "${{targets.destdir}}"/usr/share/stremio/icons/
      for size in 16 22 24 32 64 128; do
        install -Dm644 "icons/smartcode-stremio-tray_${size}.png" \
          "${{targets.destdir}}"/usr/share/stremio/icons/
      done
  - uses: strip
subpackages:
  - name: stremio-doc
    description: Stremio documentation
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share/doc/stremio
          install -Dm644 README.md "${{targets.subpkgdir}}"/usr/share/doc/stremio/
          install -Dm644 LICENSE.md "${{targets.subpkgdir}}"/usr/share/doc/stremio/
    test:
      pipeline:
        - uses: test/docs
update:
  enabled: true
  github:
    identifier: Stremio/stremio-shell
    strip-prefix: v
    use-tag: true
test:
  environment:
    contents:
      packages:
        - nodejs
        - qt5-qtbase
        - qt5-qtdeclarative
        - qt5-qtwebengine
  pipeline:
    - name: Test binary exists and is executable
      runs: |
        test -f /usr/bin/stremio
        test -x /usr/bin/stremio
    - name: Test wrapper script
      runs: |
        test -f /usr/libexec/stremio/stremio
        test -x /usr/libexec/stremio/stremio
    - name: Test desktop file
      runs: |
        test -f /usr/share/applications/stremio.desktop
        grep -q "Exec=stremio" /usr/share/applications/stremio.desktop
    - name: Test icons installed
      runs: |
        test -f /usr/share/icons/hicolor/16x16/apps/stremio.png
        test -f /usr/share/icons/hicolor/128x128/apps/stremio.png
    - name: Verify library dependencies
      runs: |
        ldd /usr/libexec/stremio/stremio | grep -q libQt5WebEngine
        ldd /usr/libexec/stremio/stremio | grep -q libmpv
        ldd /usr/libexec/stremio/stremio | grep -q libcrypto
    - name: Test security hardening flags
      runs: |
        # Verify stack protector and FORTIFY_SOURCE were applied
        readelf -p .comment /usr/libexec/stremio/stremio | grep -q GCC || true
    - uses: test/no-docs
