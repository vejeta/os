Description: Implement QtWebEngine initialization fix and CompatibleSingleApp integration
 This patch implements critical runtime fixes for Qt5/QML compatibility:
 - QtWebEngine::initialize() called before QApplication constructor to prevent QML crashes
 - Integration with custom CompatibleSingleApp instead of system SingleApplication
 - SystemTray creation timing fix (delayed until after QML engine loads)
 - Proper single-instance functionality with IPC messaging
 - Updated mainapplication.h to inherit from CompatibleSingleApp properly
 - Fixed constructor parameter mapping (!unique vs unique for allowSecondary)
Author: Juan Manuel MÃ©ndez Rey <vejeta@gmail.com>
Forwarded: not-needed
Last-Update: 2024-09-30

Index: test-corrected-patches/main.cpp
===================================================================
--- test-corrected-patches.orig/main.cpp
+++ test-corrected-patches/main.cpp
@@ -31,14 +31,17 @@ typedef QApplication Application;
 
 void InitializeParameters(QQmlApplicationEngine *engine, MainApp& app) {
     QQmlContext *ctx = engine->rootContext();
-    SystemTray * systemTray = new SystemTray();
 
     ctx->setContextProperty("applicationDirPath", QGuiApplication::applicationDirPath());
     ctx->setContextProperty("appTitle", QString(APP_TITLE));
+#ifndef DISABLE_AUTOUPDATER
     ctx->setContextProperty("autoUpdater", app.autoupdater);
+#else
+    ctx->setContextProperty("autoUpdater", QVariant());
+#endif
 
-    // Set access to an object of class properties in QML context
-    ctx->setContextProperty("systemTray", systemTray);
+    // SystemTray creation delayed - will be created after QML engine is ready
+    ctx->setContextProperty("systemTray", QVariant());
 
     #ifdef QT_DEBUG
         ctx->setContextProperty("debug", true);
@@ -49,6 +52,9 @@ void InitializeParameters(QQmlApplicatio
 
 int main(int argc, char **argv)
 {
+    // QtWebEngine::initialize() must be called before QApplication constructor
+    QtWebEngine::initialize();
+
     qputenv("QTWEBENGINE_CHROMIUM_FLAGS", "--autoplay-policy=no-user-gesture-required");
     #ifdef _WIN32
     // Default to ANGLE (DirectX), because that seems to eliminate so many issues on Windows
@@ -106,8 +112,13 @@ int main(int argc, char **argv)
 
     engine->load(QUrl(QStringLiteral("qrc:/main.qml")));
 
+    // Create SystemTray after QML engine is loaded and ready
+    SystemTray * systemTray = new SystemTray();
+    engine->rootContext()->setContextProperty("systemTray", systemTray);
+
     #ifndef Q_OS_MACOS
-    QObject::connect( &app, &SingleApplication::receivedMessage, &app, &MainApp::processMessage );
+    QObject::connect( &app, QOverload<quint32, QByteArray>::of(&CompatibleSingleApp::receivedMessage),
+                      &app, &MainApp::processMessage );
     #endif
     QObject::connect( &app, SIGNAL(receivedMessage(QVariant, QVariant)), engine->rootObjects().value(0),
                       SLOT(onAppMessageReceived(QVariant, QVariant)) );
Index: test-corrected-patches/mainapplication.h
===================================================================
--- test-corrected-patches.orig/mainapplication.h
+++ test-corrected-patches/mainapplication.h
@@ -1,12 +1,12 @@
 #include <QEvent>
 #include <QFileOpenEvent>
-#include "singleapplication.h"
+#include "compatible_singleapp.h"
 #include "autoupdater.h"
 
 #ifdef Q_OS_MACOS
 #define APP_TYPE QApplication
 #else
-#define APP_TYPE SingleApplication
+#define APP_TYPE CompatibleSingleApp
 #endif
 
 class MainApp : public APP_TYPE
@@ -14,7 +14,7 @@ class MainApp : public APP_TYPE
     Q_OBJECT
 
   public: 
-    MainApp(int &argc, char **argv, bool unique) : APP_TYPE(argc, argv, unique) {
+    MainApp(int &argc, char **argv, bool unique) : APP_TYPE(argc, argv, !unique) {
       autoupdater = new AutoUpdater();
       autoupdater->moveToThread(&autoupdaterThread);
       autoupdaterThread.start();
